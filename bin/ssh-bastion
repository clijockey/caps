#!/bin/bash

usage () {
    echo -e "\nUSAGE: ssh-bastion -d|--deployment <DEPLOYMENT_NAME> -i|--iaas <IAAS_PROVIDER>\n"
    echo -e "    <DEPLOYMENT_NAME>  The name of one of the deployment recipes."
    echo -e "    <IAAS_PROVIDER>    The iaas provider that the deployment has been deployed to.\n"
}

root_dir=$(cd $(dirname $BASH_SOURCE)/.. && pwd)

while [[ $# -gt 0 ]]; do
    case "$1" in
        -d|--deployment)
            deployment_name=$2
            shift
            ;;
        -i|--iaas)
            iaas_provider=$2
            shift
            ;;
        *)
            usage
            exit 1
            ;;
    esac
    shift
done

if [[ -z $deployment_name || -z $iaas_provider ]]; then
    usage
    exit 1
fi
if [[ ! -e $root_dir/deployments/$deployment_name ]]; then
    echo -e "\nERROR! Deployment recipe does not exist at:" 
    echo -e "\n$root_dir/deployments/$deployment_name\n"
    exit 1
fi

if [[ ! -e $root_dir/deployments/$deployment_name/$iaas_provider ]]; then
    echo -e "\nERROR! IAAS specific deployment recipe does not exist at:"
    echo -e "\n$root_dir/deployments/$deployment_name/$iaas_provider\n"
    exit 1
fi
if [[ ! -e $root_dir/deployments/$deployment_name/$iaas_provider/terraform ]]; then
    echo -e "\nERROR! The deployment recipe does not seem to have a terraform template.\n"
    exit 1
fi
if [[ ! -e $root_dir/deployments/$deployment_name/$iaas_provider/terraform/.terraform ]]; then
    echo -e "\nERROR! The deployment recipe's terraform context has not been initialized.\n"
    exit 1
fi

terraform_path=$root_dir/deployments/$deployment_name/$iaas_provider/terraform
if [[ ! -e $terraform_path/vpn-admin-ssh-key.pem ]]; then
    echo -e "\nERROR! The deployment recipe needs to applied or refreshed to retrieve the SSH keys for the bastion instance.\n"
    exit 1
fi

terraform_path=$root_dir/deployments/$deployment_name/$iaas_provider/terraform
cd $terraform_path
tf_output=$(terraform output) || exit 1
cd - >/dev/null 2>&1

host=$(echo -e "$tf_output" | awk '/bastion_admin_fqdn/{ print $3 }')
password=$(echo -e "$tf_output" | awk '/vpn_admin_password/{ print $3 }')

echo -e "\nChecking connectivity to $host...\n  * This will hang if you are not logged on to the VPN."
nc -v -z -w 1 $host 22 >/dev/null 2>&1
if [[ $? -ne 0 ]]; then
    echo "ERROR! Unable to reach SSH port of $host."
    exit 1
fi

echo -e "\nThe SU password is: $password\n"

ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no \
    -i $terraform_path/vpn-admin-ssh-key.pem vpn_admin@$host
