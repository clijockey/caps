#!/bin/bash

root_dir=$(cd $(dirname $BASH_SOURCE)/.. && pwd)
source $root_dir/bin/common
common::initialize

set -e

usage () {
    echo -e "${BLUE}\nUSAGE: caps-tf [ plan | apply | taint-bastion | destroy ] -o|-options <TERRAFORM_OPTIONS>\n"
    echo -e "    This utility will perform the given Terraform action on the deployment's bootstrap template.\n"
    echo -e "    <TERRAFORM_OPTIONS>  Additional options to pass to terraform.\n"
}

case "$1" in
    -?|--help|help)
        usage
        exit 0
        ;;
    init|plan|apply|output|taint-bastion|destroy)
        tf_action=$1
        ;;
    *)
        usage
        exit 1
        ;;
esac

shift
while [[ $# -gt 0 ]]; do
    case "$1" in
        -v|--debug)
            set -x
            ;;
        -o|--options)
            terraform_options=$2
            shift
            ;;
        *)
            usage
            exit 1
            ;;
    esac
    shift
done

cd $workspace_path
terraform_path=$root_dir/deployments/$deployment_name/$iaas_provider/terraform
export TF_VAR_ssh_key_file_path=$workspace_path

if [ ! -e .terraform ]; then

    if [[ -z $TF_VAR_terraform_state_bucket || -z $TF_VAR_bootstrap_state_prefix ]]; then
        echo -e "\nThe following environment variables must be set in order to initialize the context.\n"
        echo -e "    TF_VAR_terraform_state_bucket  The backend state bucket to save the bootstrap state."
        echo -e "    TF_VAR_bootstrap_state_prefix  The backend state path within which the state will be saved.\n"
        exit 1
    fi
        
    echo -e "\nInitializing Terraform bootstrap state using"
    echo -e "state that may already exist in the following location.\n"
    echo -e "    TF_VAR_terraform_state_bucket = $TF_VAR_terraform_state_bucket"
    echo -e "    TF_VAR_bootstrap_state_prefix = $TF_VAR_bootstrap_state_prefix\n"

    terraform init \
        -backend-config="bucket=$TF_VAR_terraform_state_bucket" \
        -backend-config="prefix=$TF_VAR_bootstrap_state_prefix" \
        $terraform_path

    # Seems to be a bug in terraform where 'output' and 'taint' command are 
    # unable to load the backend state when the working directory does not 
    # have the backend resource template file.
    backend_type=$(cat .terraform/terraform.tfstate | jq -r .backend.type)
    cat << ---EOF > $workspace_path/backend.tf
terraform {
  backend "$backend_type" {}
}
---EOF

fi

case $tf_action in
    plan)
        terraform plan -out=terraform.plan $terraform_options $terraform_path
        ;;
    output)
        terraform output 2>&1 | tee terraform.output
        ;;
    taint-bastion)
        terraform taint \
            -state=$workspace_path/.terraform/terraform.tfstate \
            -module=bootstrap.network.inception \
            google_compute_instance.bastion
            
        terraform taint \
            -state=$workspace_path/.terraform/terraform.tfstate \
            -module=bootstrap.network.inception \
            google_compute_disk.bastion-data-volume

        terraform plan -out=terraform.plan $terraform_path
        ;;
    apply)
        [[ -e terraform.plan ]] || \
            terraform plan -out=terraform.plan $terraform_options $terraform_path

        terraform apply $terraform_options terraform.plan 2>&1 \
            | tee terraform.output | awk '/Outputs:/ {l=999}; (l-- > 0) { $0="" } 1' | awk 'length'

        rm terraform.plan
        ;;
    destroy)
        terraform destroy $terraform_options \
            -state=$workspace_path/.terraform/terraform.tfstate 2>&1 \
            | tee terraform.output

        rm terraform.plan
        ;; 
esac
