#!/bin/bash

root_dir=$(cd $(dirname $BASH_SOURCE)/.. && pwd)

set -e

usage () {
    echo -e "\nUSAGE: autoops-tf [ init | plan | apply | taint ] -d|--deployment <DEPLOYMENT_NAME> -i|--iaas <IAAS_PROVIDER> -o|-options <TERRAFORM_OPTIONS>\n"
    echo -e "    This utility will initialize the deployment's Terraform bootstrap template.\n"
    echo -e "    <DEPLOYMENT_NAME>    The name of one of the deployment recipes."
    echo -e "    <IAAS_PROVIDER>      The iaas provider that the deployment has been deployed to.\n"
    echo -e "    <TERRAFORM_OPTIONS>  Additional options to pass to terraform.\n"
}

case "$1" in
    -?|--help|help)
        usage
        exit 0
        ;;
    init|plan|apply|output|taint-bastion)
        tf_action=$1
        ;;
    *)
        usage
        exit 1
        ;;
esac

shift
while [[ $# -gt 0 ]]; do
    case "$1" in
        -v|--debug)
            set -x
            ;;
        -d|--deployment)
            deployment_name=$2
            shift
            ;;
        -i|--iaas)
            iaas_provider=$2
            shift
            ;;
        -o|--options)
            terraform_options=$2
            shift
            ;;
        *)
            usage
            exit 1
            ;;
    esac
    shift
done

if [[ -z $deployment_name || -z $iaas_provider ]]; then
    usage
    exit 1
fi
if [[ ! -e $root_dir/deployments/$deployment_name ]]; then
    echo -e "\nERROR! Deployment recipe does not exist at:" 
    echo -e "\n$root_dir/deployments/$deployment_name\n"
    exit 1
fi

if [[ ! -e $root_dir/deployments/$deployment_name/$iaas_provider ]]; then
    echo -e "\nERROR! IAAS specific deployment recipe does not exist at:"
    echo -e "\n$root_dir/deployments/$deployment_name/$iaas_provider\n"
    exit 1
fi
if [[ ! -e $root_dir/deployments/$deployment_name/$iaas_provider/terraform ]]; then
    echo -e "\nERROR! The deployment recipe does not seem to have a terraform template.\n"
    exit 1
fi

if [[ -z $TF_VAR_vpc_name ]]; then 
    echo -e "\nThe 'TF_VAR_vpc_name' environment variable must be set with a"
    echo -e "unique name to identify this environment within you cloud account."
    exit 1
fi

terraform_path=$root_dir/deployments/$deployment_name/$iaas_provider/terraform

workspace_path=$root_dir/.workspace/$TF_VAR_vpc_name
mkdir -p $workspace_path
cd $workspace_path

export TF_VAR_ssh_key_file_path=$workspace_path

case $tf_action in
    init)
        if [[ -z $TF_VAR_bootstrap_state_bucket || -z $TF_VAR_bootstrap_state_prefix ]]; then
            echo -e "\nThe following environment variables must be set in order to initialize the context.\n"
            echo -e "    TF_VAR_bootstrap_state_bucket  The backend state bucket to save the bootstrap state."
            echo -e "    TF_VAR_bootstrap_state_prefix  The backend state path within which the state will be saved.\n"
            exit 1
        fi
            
        echo -e "\nInitializing Terraform bootstrap state using"
        echo -e "state that may already exist in the following location.\n"
        echo -e "    TF_VAR_bootstrap_state_bucket = $TF_VAR_bootstrap_state_bucket"
        echo -e "    TF_VAR_bootstrap_state_prefix = $TF_VAR_bootstrap_state_prefix\n"

        rm -fr $workspace_path/.terraform

        terraform init \
            -backend-config="bucket=$TF_VAR_bootstrap_state_bucket" \
            -backend-config="prefix=$TF_VAR_bootstrap_state_prefix" \
            $terraform_path

        # Seems to be a bug in terraform where 'output' and 'taint' command are 
        # unable to load the backend state when the working directory does not 
        # have the backend resource template file.
        backend_type=$(cat .terraform/terraform.tfstate | jq -r .backend.type)
        cat << ---EOF > $workspace_path/backend.tf
terraform {
  backend "$backend_type" {}
}
---EOF

        ;;
    plan)
        terraform plan -out=terraform.plan $terraform_options $terraform_path
        ;;
    apply)
        if [[ -e terraform.plan ]]; then
            terraform apply terraform.plan 2>&1 \
                | tee terraform.output 
        else
            terraform apply $terraform_options $terraform_path 2>&1 \
                | tee terraform.output 
        fi 
        ;;
    output)
        terraform output \
            -state=$workspace_path/.terraform/terraform.tfstate 2>&1 \
            | tee terraform.output
        ;; 
    taint-bastion)
        terraform taint \
            -state=$workspace_path/.terraform/terraform.tfstate \
            -module=bootstrap.network.inception \
            google_compute_instance.bastion
            
        terraform taint \
            -state=$workspace_path/.terraform/terraform.tfstate \
            -module=bootstrap.network.inception \
            google_compute_disk.bastion-data-volume
        ;;
esac
