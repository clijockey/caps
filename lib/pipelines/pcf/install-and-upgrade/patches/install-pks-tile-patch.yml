- op: add
  path: /resources/-
  value:
    name: ${product_name}-tile
    type: pivnet
    source:
      api_token: ((pivnet_token))
      product_slug: ${product_slug}
      product_version: ${product_version}
      sort_by: semver

- op: add
  path: /jobs/-
  value:
    name: ${product_name}-tile-regulator
    plan:
    - get: schedule
      trigger: true
    - get: ${product_name}-tile
      params: {globs: []}
      # params:
      #   globs:
      #   - ((product_globs))

- op: add
  path: /jobs/-
  value:
    name: upload-${product_name}-tile
    plan:
    - aggregate:
      - get: automation
      - get: pcf-pipelines
      - get: pivnet-opsmgr
        passed: [deploy-director]
        trigger: true
        params: {globs: []}
      - get: pivnet-product
        resource: ${product_name}-tile
        passed: [${product_name}-tile-regulator]
        trigger: true
        params:
          globs:
          - ((product_globs))

    # Upload product tile and its stemcell
    - task: upload-tile
      file: pcf-pipelines/tasks/upload-product-and-stemcell/task.yml
      params:
        IAAS: ((iaas_type))
        OPSMAN_DOMAIN_OR_IP_ADDRESS: ((opsman_domain_or_ip_address))
        OPSMAN_CLIENT_ID: ((opsman_client_id))
        OPSMAN_CLIENT_SECRET: ((opsman_client_secret))
        OPS_MGR_USR: ((opsman_admin_username))
        OPS_MGR_PWD: ((opsman_admin_password))
        PIVNET_API_TOKEN: ((pivnet_token))
        NO_PROXY: ""
        OM_IP: ""

    # Stage product tile
    - task: stage
      file: automation/lib/pipelines/pcf/install-and-upgrade/tasks/stage-product/task.yml
      params:
        OPSMAN_DOMAIN_OR_IP_ADDRESS: ((opsman_domain_or_ip_address))
        OPSMAN_CLIENT_ID: ((opsman_client_id))
        OPSMAN_CLIENT_SECRET: ((opsman_client_secret))
        OPSMAN_USERNAME: ((opsman_admin_username))
        OPSMAN_PASSWORD: ((opsman_admin_password))
        STAGE_AND_APPLY: false
        ENABLE_ERRANDS: ((enable_errands))

- op: add
  path: /jobs/-
  value:
    name: configure-${product_name}-tile
    serial_groups: [opsman]
    plan:
    - aggregate:
      - get: automation
      - get: pcf-pipelines
      - get: terraform-output
      - get: pivnet-product
        resource: ${product_name}-tile
        passed: [upload-${product_name}-tile]
        trigger: true
        params: { globs: [] }

    # Configure product tile
    - task: configure
      file: automation/lib/pipelines/pcf/install-and-upgrade/tasks/configure-pks/task.yml
      params:
        OPSMAN_DOMAIN_OR_IP_ADDRESS: ((opsman_domain_or_ip_address))
        OPSMAN_CLIENT_ID: ((opsman_client_id))
        OPSMAN_CLIENT_SECRET: ((opsman_client_secret))
        OPSMAN_USERNAME: ((opsman_admin_username))
        OPSMAN_PASSWORD: ((opsman_admin_password))
        # pks product and configuration
        TEMPLATE_OVERRIDE_PATH:
        # pks networking
        NETWORK_NAME: services-1
        SERVICE_NETWORK_NAME: dynamic-services-1
        SINGLETON_AVAILABILITY_ZONE: ((gcp_zone_1))
        OTHER_AVAILABILITY_ZONES: ((gcp_zone_1)),((gcp_zone_2)),((gcp_zone_3))
        # pks resources
        INTERNET_CONNECTED: false
        # pks properties
        PKS_API_URL: pks.((system_domain_prefix))
        CLOUD_PROVIDER: gcp
        GCP_SERVICE_KEY: ((gcp_service_account_key))
        GCP_PROJECT_ID: ((gcp_project))
        PLAN1_WORKER_INSTANCES: 3
        PLAN1_ALLOW_PRIVILEGED_CONTAINERS: true
        PLAN1_AZ_PLACEMENT: ((gcp_zone_1))
        PLAN2_WORKER_INSTANCES: 5
        PLAN2_ALLOW_PRIVILEGED_CONTAINERS: true
        PLAN2_AZ_PLACEMENT: ((gcp_zone_2))
        PLAN3_WORKER_INSTANCES: 0
        PLAN3_ALLOW_PRIVILEGED_CONTAINERS: true
        PLAN3_AZ_PLACEMENT: ((gcp_zone_3))

- op: add
  path: /jobs/name=deploy/plan/0/aggregate/-
  value:
    get: ${product_name}-tile
    passed: [configure-${product_name}-tile]
    trigger: true
    params: { globs: [] } 
